def lis(arr):
    n = len(arr)

    # Declare the list (array) for LIS and
    # initialize LIS values for all indexes
    lis = [1] * n

    # Declare a list to store the LIS
    lis_sequence = [[] for _ in range(n)]

    # Initialize the LIS sequence with single elements
    for i in range(n):
        lis_sequence[i].append(arr[i])

    # Compute optimized LIS values in a bottom-up manner
    for i in range(1, n):
        for j in range(0, i):
            if arr[i] > arr[j] and lis[i] < lis[j] + 1:
                lis[i] = lis[j] + 1
                lis_sequence[i] = lis_sequence[j] + [arr[i]]

    # Find the index of the LIS with maximum length
    max_length_index = lis.index(max(lis))

    # Return both the length of the LIS and the LIS itself
    return max(lis), lis_sequence[max_length_index]


# Driver program to test the function
if __name__ == '__main__':
    arr = [3, -2, 1, 4, 7, 1]
    lis_length, lis_sequence = lis(arr)
    print("Length of lis is", lis_length)
    print("Longest increasing subsequence is", lis_sequence)

 
